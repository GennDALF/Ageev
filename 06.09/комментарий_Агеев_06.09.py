## pre-scriptum: в Стилях Notepad++ настройте цвет STRINGEOL, чтобы отличать мои комментарии ##, в PyCharm для этого надо редактировать файл цветовой схемы

## ==========  1  ========== ##

import math

class Tetra:
    """Класс для вычисления  площади поверхности и объёма тетраидра"""
    ## допишите для параметра side аннотацию типа, чтобы все, использующие этот класс, 
    ##   знали, что сюда надо передать объект int
    def __init__(self, side):
        self.side = side

    def square_tetr(self):
        """Метод вычисляющий площадь"""
        ## зачем здесь явное приведение к типу int? 
        ##   вы предполагаете, что в атрибуте self.side может храниться объект другого типа?
        s = math.sqrt(3 * (int(self.side) * int(self.side)))
        ## мы редко прибегаем к выводу в стандартный поток из метода
        ## метод должен вернуть значение, а уже как этим значением распорядиться — это задача 
        ##   кода верхнего уровня, снаружи класса
        print(s)

    def volume_tetr(self):
        """Метод вычисляющий обЪём"""
        v = (1/12) * (int(self.side) ** 3) * math.sqrt(2)
        print(v)

    ## в целом, построение класса верное
    ## на перспективу:
    ##   сейчас у вас есть возможность изменить длину рёбер после создания объекта, и методы
    ##   каждый раз вычисляют значения заново — это правильный подход для изменяемых объектов, 
    ##   но даже в этом случае стоит использовать кэширование для методов, с тем, чтобы они 
    ##   запоминали последнее вычисленное значение и пересчитывали значения только при 
    ##   изменении объекта
    ##   но если вы хотите неизменяемый объект, то стоит использовать конструктор для разовой 
    ##   инициализации полей и свойства для последующего разового вычисления необходимых значений — 
    ##   это позволит использовать такие объекты с заметно большей производительностью


#Экземпляр класса        
d = Tetra(4)
## вывод в стандартный поток должен находиться здесь
d.square_tetr()
d.volume_tetr()

# 6.928203230275509
# 7.542472332656507



## ==========  2  ========== ## 

## лучше импортировать не весь модуль — тем более такой большй — а только необходимые 
##   объекты из него
import datetime

class Time_belt:
    """Класс который принимает в качестве аргумента
        часовой пояс в котором необходимо узнать период суток"""
    ## аннотация типа для hourr
    def __init__(self, hourr):
        self.hourr = hourr

    def check_belt(self):
        """Метод класса вовращающий период суток"""
        ## метод now() возвращает время в текущем (для ОС) часовом поясе, а не по Гринвичу
        ##   чтобы получить время по Гринвичу используйте метод utcnow()
        time_now = datetime.datetime.now()
        ## зачем в два этапа? datetime.datetime.now().hour
        hour_now = time_now.hour
        ## почему строгие неравенства? у нас есть часовые пояса UTC-12 и UTC+12
        if int(self.hourr) > 12 or int(self.hourr) < -12:
            ## в таких ситуациях необходимо сгенерировать исключение с поясняющим текстом
            ##   здесь подойдёт тип ValueError:
            ##     raise ValueError('номер часового пояса должен быть в диапазоне от -12 до 12')
            False
        else:
            ## никак не могу понять, зачем вы постоянно все int объекта снова и снова 
            ##   преобразовываете в int
            s = int(hour_now) - int(self.hourr)
        
            ## математика у вас страдает
            ## а можно было бы использовать тип timedelta из модуля datetime
            if s < 0:
                s = 24 - -s
            elif s > 24:
                s = s - 24
        
            if 6 <= s <= 11:
                return "В это часовом поясе сейчас - утро"
            elif 12 <= s <= 17:
                 return "В это часовом поясе сейчас - день"
            elif 18 <= s <= 24:
                 return "В это часовом поясе сейчас - вечер"
            elif s <= 5:
                 return "В это часовом поясе сейчас - ночь"


    ## не считая проблем с математикой, класс выстроен правильно для текущего уровня
    ## но в целом, едва ли эффективно для каждого подобного вычисления создавать 
    ##   и хранить отдельный экземпляр отдельного класса
    ## так что в перспективе данный класс явно стоит перепроектировать: 
    ##   подумайте, каким образом — есть ещё несколько способов


#Создание экземпляра класса
y = input("Напишите ваш часовой пояс относительно Лондона(Напр. '+2', '-2'): ")
z = Time_belt(y)
m = z.check_belt()
print(m)

## так всё-таки "ВАШ часовой пояс" или "часовой пояс ОТНОСИТЕЛЬНО Гринвича"?
# Напишите ваш часовой пояс относительно Лондона(Напр. '+2', '-2'): 5
# В это часовом поясе сейчас - вечер
